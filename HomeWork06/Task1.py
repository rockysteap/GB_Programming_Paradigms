from _my_lib.service import Service
from random import randint

"""
Предположим, что мы хотим найти элемент в массиве (получить
его индекс). Мы можем это сделать просто перебрав все элементы.
Но что, если массив уже отсортирован? В этом случае можно
использовать бинарный поиск. Принцип прост: сначала берём
элемент находящийся посередине и сравниваем с тем, который мы
хотим найти. Если центральный элемент больше нашего,
рассматриваем массив слева от центрального, а если больше -
справа и повторяем так до тех пор, пока не найдем наш элемент.
"""


def binary_search(arr, low, high, num):
    """
    Бинарный (двоичный) поиск - это алгоритм поиска элемента в отсортированном массиве.
    Он сокращает количество операций сравнения до log(n), где n - количество элементов в массиве.
    Алгоритм бинарного поиска работает следующим образом:
    -> Сначала находится середина массива.
    -> Затем сравнивается искомый элемент с элементом в середине массива.
    -> Если они равны, то возвращается индекс этого элемента.
    -> Если искомый элемент меньше, то алгоритм рекурсивно вызывается для левой половины массива.
    -> Если искомый элемент больше, то алгоритм рекурсивно вызывается для правой половины массива.
    :param arr: Входящий отсортированный массив для поиска элемента в нём.
    :param low: Нижняя граница (индекс) поиска.
    :param high: Верхняя граница (индекс) поиска.
    :param num: Искомый элемент.
    :return: None или индекс
    """
    if high >= low:
        mid = (high + low) // 2

        if arr[mid] == num:
            return mid

        elif arr[mid] > num:
            return binary_search(arr, low, mid - 1, num)

        else:
            return binary_search(arr, mid + 1, high, num)

    else:
        return


if __name__ == "__main__":
    # Сгенерируем и отсортируем массив
    sorted_lst = sorted(Service.get_random_int_list(100, -100, 100))
    # Сгенерируем искомое значение
    element = randint(-100, 100)
    # Вызовем поиск, передав в него массив, границы поиска и искомое значение.
    result = binary_search(sorted_lst, 0, len(sorted_lst) - 1, element)

    # Вывод массива
    it = iter(sorted_lst)
    for i in range(10):
        [print(str(next(it)).rjust(4), end=' ') for _ in range(10)]
        print()

    # Вывод результата
    if result:
        print(f'\nЭлемент {element} найден по индексу {str(result)}.')
    else:
        print(f'\nЭлемент {element} не найден.')
